import numpy as np 
import math
from math import sin,cos, atan2, sqrt, acos, asin 
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import Axes3D

######## SOME POINTS TO BE NOTED ########
# On running this code, there will be one matplotlib output window which will run a 3D animation.
# You will be able to see two lines, one green (which will be fixed) and the other will be red 
# which will be progressing further with time.
# The green line represents the desired trajectory and the red line represents the actual trajectory.

#defining animation parameters 

fps = 60
dt = 1/fps

#define the geometric parameters of the robot

a1 = 0.25
a2 = 0.25
mlink1 = 0.8
mlink2 = 0.8
mlink3 = 0.8
radiuslink3 = 0.1
mp3 = mlink3
mt3 = mlink3
mR1 = 0
mR2 = 0
d = a1/2
I1 = 0.005
IR1 = 0
I2 = 0.005
IR2 = 0
I3 = I2 + mlink2*(d**2)
I4 = I1 + I3 + mlink2*(a1**2)
I5 = mlink2*a1*d
I6 = I3
I3_ = 0.005
I10 = mt3*(a1**2 + a2**2)
I8 = mp3*(a1**2 + a2**2) + I3_ + I10 
I9 = mp3*(a2**2) + I3_
I11 = 2*mp3*(a2**2) + 2*I3_ + I10
I12 = mp3*a1*a2
I13 = mt3*a1*a2
I14 = I4 + I8
I15 = I5 + I13
I16 = I6 + I9 + 0.25*I10 
I17 = I3 + I11
I18 = I5 + 2*(I12 + I13) 

# First step will be to solve the inverse kinematics for the SCARA robot.
# That is to calculate the desired joint variables from the given cartesian coordinates. 

def solveinvSCARA(p):
    x = p[0]
    y = p[1]
    z = p[2]
    d3 = -z
    D = ((x)**2 + (y)**2 - a1**2 - a2**2)/(2*a1*a2)
    q2 = math.acos(D)
    q1 = math.atan2((y),(x)) - math.atan2((a2*math.sin(q2)),(a1 + a2*math.cos(q2)))    
    return(q1,q2,d3)

# Second step will be to incorporate dynamics.
# Here the tau for each joint will be mapped to corresponding joint variables. 
# Then to calculate joint variables from the provided tau (in this case the controller torque)
# the ODE will be solved further for every time instance. 

def Scara_dynamics_model(q,tau):
    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q1dot = q[3]
    q2dot = q[4]
    q3dot = q[5]

    H = np.array([[(I14+2*I12*cos(q1) + 2*I15*cos(q2)),(0.5*(I17 + I18*cos(q2))),0],[(0.5*(I17 + I18*cos(q2))), (I16 + 0.5*I13*cos(q2)), 0],[0,0,mp3]])
    h = np.array([[-2*I15*q1dot*q2dot*sin(q2)-0.5*I18*(q2dot**2)*sin(q2)],[I15*(q1dot**2)*sin(q2)-0.25*I13*(q2dot**2)*sin(q2)],[0]])

    output_1 = np.array([[q1dot],[q2dot],[q3dot]])
    output_2 = np.matmul((np.linalg.inv(H)), (tau-h))
    output = np.vstack((output_1,output_2))
    return output

def Scara_dynamics_model1(q):
    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q1dot = q[3]
    q2dot = q[4]
    q3dot = q[5]

    H = np.array([[(I14+2*I12*cos(q1) + 2*I15*cos(q2)),(0.5*(I17 + I18*cos(q2))),0],[(0.5*(I17 + I18*cos(q2))), (I16 + 0.5*I13*cos(q2)), 0],[0,0,mp3]])
    h = np.array([[-2*I15*q1dot*q2dot*sin(q2)-0.5*I18*(q2dot**2)*sin(q2)],[I15*(q1dot**2)*sin(q2)-0.25*I13*(q2dot**2)*sin(q2)],[0]])
    return (H,h)

# Third step is to create a Feed Forward controller for each joint

def FeedForwardcontroller(qd__,qd,q,dt,K0):
    nu = np.array([[(qd__[0])-K0*(q[0]) +K0*(qd[0])],[qd__[1]-K0*(q[1]) +K0*(qd[1])],[qd__[2]-K0*(q[2]) +K0*(qd[2])]])
    #qdot = np.array([[q[3]],[q[4]],[q[5]]])
    H,h = Scara_dynamics_model1(q)
    Tau_c = np.matmul(H,nu) + h
    return (Tau_c)

# Fourth step will be to solve the forward kinematics for the actual joint variabes

def Scara_solveforward(q):

    def R(axis, angle): # Input axis as 'x', 'y' or 'z' strings for x, y or z axis respectively. Input angle in degrees
        angle = math.radians(angle)
        if axis == 'x':
            mat = np.array([[1,0,0],[0,math.cos(angle),-math.sin(angle)],[0,math.sin(angle),math.cos(angle)]])
        elif axis == 'y':
            mat = np.array([[math.cos(angle),0,math.sin(angle)],[0,1,0],[-math.sin(angle),0,math.cos(angle)]])
        elif axis == 'z':
            mat = np.array([[math.cos(angle),-math.sin(angle),0],[math.sin(angle),math.cos(angle),0],[0,0,1]])
        return mat

    #Defining H matrix calculation function
    def H_(R,d_):
        matH = np.zeros((4,4))
        for i in range(3):
            for j in range(3):
                matH[i][j] = R[i][j]
        for i in range(3):
            matH[i][3] = d_[i]
        matH[3][3] = 1
        return matH

    # taking input for joint space (in this case 2 angles and 1 displacement)
    q1 = q[0]
    q2 = q[1]
    d3 = q[2]

    # Calculating R matrices for SCARA 
    R01 = R('z',q1)
    R12 = R('z',q2) 
    R23 = R('z',0)

    # Calculating d vectors for SCARA
    d01 = np.array([0,0,0])
    d12 = np.array([a1,0,0])
    d23 = np.array([a2,0,0])

    # Calculating the Coordinate of the end effector with respect to the last coordinate frame 
    P3 = np.array([0,0,-d3])
    P3_ = np.array([P3[0],P3[1],P3[2],1])

    # Calculating H matrices for SCARA
    H01 = H_(R01,d01)
    H12 = H_(R12,d12)
    H23 = H_(R23,d23)

    # Calculating P0 Vector
    P0_ = np.matmul(np.matmul(H01,H12),np.matmul(H23,P3_))
    P0 = P0_[:3]

    return P0 

# Fifth step will be to define a function that takes the input as two cartesian points and returns the trajectory
# in terms of the joint variables.

def trajectory_planner():
    t0 = 0
    tf = 1
    def fq1(t,part) :
        if part == 'AB':
            q = -atan2(0.25*sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2), 0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32) + atan2(0.1*t**3 - 0.15*t**2 + 0.06, 0.4)
            q_dot = 0.01125*sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(4.0*t**2 - 4*t)*(0.666666666666667*t**3 - t**2 + 0.4)/(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625) + 0.4*(0.3*t**2 - 0.3*t)/(0.0225*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.16) + 0.0126*(4.0*t**2 - 4*t)*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4)/(sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625))
            q_ddot = 0.01125*sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(8.0*t - 4)*(0.666666666666667*t**3 - t**2 + 0.4)/(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625) + 0.01125*sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(2.0*t**2 - 2*t)*(4.0*t**2 - 4*t)/(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625) + 1.07288360595703*sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(4.0*t**2 - 4*t)*(-0.0288*(4.0*t**2 - 4*t)*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4) + 0.00630000000000001*(4.0*t**2 - 4*t)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4))*(0.666666666666667*t**3 - t**2 + 0.4)/((0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.0478515625000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.6103515625)**2 + 0.4*(0.6*t - 0.3)/(0.0225*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.16) - 0.3515625*(0.3*t**2 - 0.3*t)*(4.0*t**2 - 4*t)*(0.666666666666667*t**3 - t**2 + 0.4)/(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0126*(8.0*t - 4)*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4)/(sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625)) + 0.1296*(t**2 - t)**2*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.666666666666667*t**3 - t**2 + 0.4)**2/(sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625)) + 0.0126*(2.0*t**2 - 2*t)*(4.0*t**2 - 4*t)*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)/(sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625)) + 1.20162963867188*(4.0*t**2 - 4*t)*(-0.0288*(4.0*t**2 - 4*t)*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4) + 0.00630000000000001*(4.0*t**2 - 4*t)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4))*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4)/(sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)*((0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.0478515625000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.6103515625)**2) + 0.01016064*(t**2 - t)**2*(0.045*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.32)*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2*(0.666666666666667*t**3 - t**2 + 0.4)**2/((1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)**(3/2)*(0.1024*(0.140625*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 - 0.00490000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2 + 0.0625))
        
        elif part == 'BC':
            q = atan2(0.01, 0.1*t**3 - 0.15*t**2 + 0.4) - atan2(0.32*sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2), 0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)
            q_dot = 0.1024*sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(1.5*t**2 - 1.5*t)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625) - 0.01*(0.3*t**2 - 0.300000000000001*t)/(0.16*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.0001) + 0.32*(1.5*t**2 - 1.5*t)*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625))
            q_ddot = 0.1024*sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(3.0*t - 1.5)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625) + 0.1024*sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(0.750000000000001*t**2 - 0.750000000000002*t)*(1.5*t**2 - 1.5*t)/(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625) + 9.765625*sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(1.5*t**2 - 1.5*t)*(0.2048*(1.5*t**2 - 1.5*t)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1) - 0.2048*(1.5*t**2 - 1.5*t)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)*(0.25*t**3 - 0.375000000000001*t**2 + 1))*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(-((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.6103515625)**2 - 0.01*(0.600000000000001*t - 0.300000000000001)/(0.16*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.0001) + 0.0625*(0.3*t**2 - 0.300000000000001*t)*(1.5*t**2 - 1.5*t)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625)**2 + 0.32*(3.0*t - 1.5)*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625)) + 0.32*(0.750000000000001*t**2 - 0.750000000000002*t)*(1.5*t**2 - 1.5*t)*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)/(sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625)) + 0.720000000000004*(0.999999999999999*t**2 - t)**2*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2/(sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625)) + 30.517578125*(1.5*t**2 - 1.5*t)*(0.2048*(1.5*t**2 - 1.5*t)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1) - 0.2048*(1.5*t**2 - 1.5*t)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)*(0.25*t**3 - 0.375000000000001*t**2 + 1))*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/(sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)*(-((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.6103515625)**2) + 0.720000000000004*(0.999999999999999*t**2 - t)**2*(0.32*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000200000000000006)*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2/((0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)**(3/2)*(-0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2 + 0.1024*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 + 0.000625000000000018)**2 + 0.0625))

        elif part == 'CD':
            q = -atan2(0.25*sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2), 0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245) + atan2(-0.1*t**3 + 0.15*t**2 + 0.01, 0.35)
            q_dot = 0.01125*sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(-4.0*t**2 + 4*t)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625) + 0.35*(-0.3*t**2 + 0.3*t)/(0.0225*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.1225) + 0.0081*(-4.0*t**2 + 4*t)*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625))
            q_ddot = 0.35*(0.3 - 0.6*t)/(0.0225*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.1225) + 0.01125*sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(4 - 8.0*t)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625) + 0.01125*sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(-4.0*t**2 + 4*t)*(-2.0*t**2 + 2*t)/(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625) + 2.88*sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(-4.0*t**2 + 4*t)*(-0.02205*(-4.0*t**2 + 4*t)*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667) + 0.00405*(-4.0*t**2 + 4*t)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667))*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(0.9604*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 1)**2 - 0.524781341107872*(-4.0*t**2 + 4*t)*(-0.3*t**2 + 0.3*t)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 + 0.0081*(4 - 8.0*t)*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625)) + 0.0081*(-4.0*t**2 + 4*t)*(-2.0*t**2 + 2*t)*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)/(sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625)) + 2.0736*(-4.0*t**2 + 4*t)*(-0.02205*(-4.0*t**2 + 4*t)*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667) + 0.00405*(-4.0*t**2 + 4*t)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667))*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/(sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(0.9604*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 1)**2) + 0.1296*(-t**2 + t)**2*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2/(sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)*(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625)) + 0.00419904*(-t**2 + t)**2*(0.045*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 0.245)*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2/((1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)**(3/2)*(0.060025*(0.183673469387755*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 + 1)**2 - 0.002025*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2 + 0.0625))
        
        elif part == 'DA':
            q = atan2(0.06, -0.1*t**3 + 0.15*t**2 + 0.35) - atan2(0.25*sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2), 0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)
            q_dot = 0.06125*sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625) - 0.06*(-0.3*t**2 + 0.300000000000001*t)/(0.1225*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0036) + 0.2401*(-1.71428571428572*t**2 + 1.71428571428572*t)*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625))
            q_ddot = -0.06*(0.300000000000001 - 0.600000000000001*t)/(0.1225*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0036) + 0.06125*sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(1.71428571428572 - 3.42857142857143*t)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625) + 0.06125*sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.857142857142858*t**2 + 0.857142857142859*t)/(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625) + 15.68*sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-1.71428571428572*t**2 + 1.71428571428572*t)*(0.12005*(-1.71428571428572*t**2 + 1.71428571428572*t)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1) - 0.12005*(-1.71428571428572*t**2 + 1.71428571428572*t)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1))*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(-0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 1)**2 + 0.489795918367347*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.3*t**2 + 0.300000000000001*t)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.2401*(1.71428571428572 - 3.42857142857143*t)*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625)) + 0.2401*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.857142857142858*t**2 + 0.857142857142859*t)*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)/(sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625)) + 61.4656*(-1.71428571428572*t**2 + 1.71428571428572*t)*(0.12005*(-1.71428571428572*t**2 + 1.71428571428572*t)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1) - 0.12005*(-1.71428571428572*t**2 + 1.71428571428572*t)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1))*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/(sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 1)**2) + 0.705600000000003*(-0.999999999999998*t**2 + t)**2*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2/(sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)*(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625)) + 0.677658240000003*(-0.999999999999998*t**2 + t)**2*(0.245*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.00719999999999998)*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2/((1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)**(3/2)*(-0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2 + 0.060025*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 + 0.0293877551020408)**2 + 0.0625))
        return [q,q_dot,q_ddot]

    def fq2(t,part) :
        if part == 'AB':
            q = acos(0.18*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 0.28)
            q_dot = -0.18*(4.0*t**2 - 4*t)*(0.666666666666667*t**3 - t**2 + 0.4)/sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)
            q_ddot = -0.18*(8.0*t - 4)*(0.666666666666667*t**3 - t**2 + 0.4)/sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2) - 0.18*(2.0*t**2 - 2*t)*(4.0*t**2 - 4*t)/sqrt(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2) - 0.145152*(t**2 - t)**2*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)*(0.666666666666667*t**3 - t**2 + 0.4)**2/(1 - 0.0784000000000001*(0.642857142857142*(0.666666666666667*t**3 - t**2 + 0.4)**2 + 1)**2)**(3/2)   
        
        elif part == 'BC':
            q = acos(1.28*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.9992)
            q_dot = -1.0*(1.5*t**2 - 1.5*t)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)
            q_ddot = -1.0*(3.0*t - 1.5)*(0.25*t**3 - 0.375000000000001*t**2 + 1)/sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2) - 1.0*(0.750000000000001*t**2 - 0.750000000000002*t)*(1.5*t**2 - 1.5*t)/sqrt(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2) - 2.25000000000001*(0.999999999999999*t**2 - t)**2*((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)*(0.25*t**3 - 0.375000000000001*t**2 + 1)**2/(0.6103515625 - ((0.25*t**3 - 0.375000000000001*t**2 + 1)**2 - 0.780625)**2)**(3/2)

        elif part == 'CD':
            q = acos(0.18*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.0200000000000001)
            q_dot = -0.18*(-4.0*t**2 + 4*t)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)
            q_ddot = -0.18*(4 - 8.0*t)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)/sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2) - 0.18*(-4.0*t**2 + 4*t)*(-2.0*t**2 + 2*t)/sqrt(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2) - 0.093312*(-t**2 + t)**2*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)*(-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2/(1 - 0.0324*((-0.666666666666667*t**3 + t**2 + 0.0666666666666667)**2 - 0.111111111111112)**2)**(3/2)

        elif part == 'DA':
            q = acos(0.98*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.9712)
            q_dot = -0.98*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)
            q_ddot = -0.98*(1.71428571428572 - 3.42857142857143*t)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)/sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2) - 0.98*(-1.71428571428572*t**2 + 1.71428571428572*t)*(-0.857142857142858*t**2 + 0.857142857142859*t)/sqrt(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2) - 2.76595200000001*(-0.999999999999998*t**2 + t)**2*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)*(-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2/(1 - 0.9604*((-0.285714285714286*t**3 + 0.42857142857143*t**2 + 1)**2 - 0.991020408163266)**2)**(3/2)
        return [q,q_dot,q_ddot]

    def fq3(t,part) :
        if part == 'AB':
            q = 0.15
            q_dot = 0
            q_ddot = 0

        elif part == 'BC':
            q = 0.15
            q_dot = 0
            q_ddot = 0

        elif part == 'CD':
            q = 0.15
            q_dot = 0
            q_ddot = 0

        elif part == 'DA':
            q = 0.15
            q_dot = 0
            q_ddot = 0
        return [q,q_dot,q_ddot]

    del_t = tf - t0
    N = del_t*(fps)
    t_ = t0
    #q0 = [q10,q20,q30,q10_,q20_,q30_]

    run = True
    a = 1
    trajectoryAB = []
    trajectoryBC = [] 
    trajectoryCD = []
    trajectoryDA = []

    double_derivate_trajAB = []
    double_derivate_trajBC = []
    double_derivate_trajCD = []
    double_derivate_trajDA = []
    while run:
        if a <= N:
            [q1ABd, q1ABd_] = [fq1(t_,'AB')[0], fq1(t_,'AB')[1]]
            [q2ABd, q2ABd_] = [fq2(t_,'AB')[0], fq2(t_,'AB')[1]]
            [q3ABd, q3ABd_] = [fq3(t_,'AB')[0], fq3(t_,'AB')[1]]
            trajectoryAB.append([q1ABd,q2ABd,q3ABd,q1ABd_,q2ABd_,q3ABd_])
            q1ABd__ = fq1(t_,'AB')[2]
            q2ABd__ = fq2(t_,'AB')[2]
            q3ABd__ = fq3(t_,'AB')[2]
            double_derivate_trajAB.append([q1ABd__,q2ABd__,q3ABd__])

            [q1BCd, q1BCd_] = [fq1(t_,'BC')[0], fq1(t_,'BC')[1]]
            [q2BCd, q2BCd_] = [fq2(t_,'BC')[0], fq2(t_,'BC')[1]]
            [q3BCd, q3BCd_] = [fq3(t_,'BC')[0], fq3(t_,'BC')[1]]
            trajectoryBC.append([q1BCd,q2BCd,q3BCd,q1BCd_,q2BCd_,q3BCd_])
            q1BCd__ = fq1(t_,'BC')[2]
            q2BCd__ = fq2(t_,'BC')[2]
            q3BCd__ = fq3(t_,'BC')[2]
            double_derivate_trajBC.append([q1BCd__,q2BCd__,q3BCd__])

            [q1CDd, q1CDd_] = [fq1(t_,'CD')[0], fq1(t_,'CD')[1]]
            [q2CDd, q2CDd_] = [fq2(t_,'CD')[0], fq2(t_,'CD')[1]]
            [q3CDd, q3CDd_] = [fq3(t_,'CD')[0], fq3(t_,'CD')[1]]
            trajectoryCD.append([q1CDd,q2CDd,q3CDd,q1CDd_,q2CDd_,q3CDd_])
            q1CDd__ = fq1(t_,'CD')[2]
            q2CDd__ = fq2(t_,'CD')[2]
            q3CDd__ = fq3(t_,'CD')[2]
            double_derivate_trajCD.append([q1CDd__,q2CDd__,q3CDd__])

            [q1DAd, q1DAd_] = [fq1(t_,'DA')[0], fq1(t_,'DA')[1]]
            [q2DAd, q2DAd_] = [fq2(t_,'DA')[0], fq2(t_,'DA')[1]]
            [q3DAd, q3DAd_] = [fq3(t_,'DA')[0], fq3(t_,'DA')[1]]
            trajectoryDA.append([q1DAd,q2DAd,q3DAd,q1DAd_,q2DAd_,q3DAd_])
            q1DAd__ = fq1(t_,'DA')[2]
            q2DAd__ = fq2(t_,'DA')[2]
            q3DAd__ = fq3(t_,'DA')[2]
            double_derivate_trajDA.append([q1DAd__,q2DAd__,q3DAd__])

            t_ += dt
            a += 1 
        else:
            run = False
    
    return (trajectoryAB,trajectoryBC,trajectoryCD,trajectoryDA,double_derivate_trajAB,double_derivate_trajBC,double_derivate_trajCD,double_derivate_trajDA)

# sixth step which is the last step is to integrate all the functions defined earlier and simulate the robot.

trajectoryAB,trajectoryBC,trajectoryCD,trajectoryDA,double_derivate_trajAB,double_derivate_trajBC,double_derivate_trajCD,double_derivate_trajDA = trajectory_planner()

trajectoryAB_c = []
for i in range(len(trajectoryAB)):
    trajectoryAB_c.append(Scara_solveforward([math.degrees(trajectoryAB[i][0]),math.degrees(trajectoryAB[i][1]),trajectoryAB[i][2]]))

q0AB = np.array([trajectoryAB[0][0],trajectoryAB[0][1],trajectoryAB[0][2],trajectoryAB[0][3],trajectoryAB[0][4],trajectoryAB[0][5]])
qfAB = np.array([trajectoryAB[-1][0],trajectoryAB[-1][1],trajectoryAB[-1][2],trajectoryAB[-1][3],trajectoryAB[-1][4],trajectoryAB[-1][5]])
q = q0AB

trajectoryBC_c = []
for i in range(len(trajectoryBC)):
    trajectoryBC_c.append(Scara_solveforward([math.degrees(trajectoryBC[i][0]),math.degrees(trajectoryBC[i][1]),trajectoryBC[i][2]]))

q0BC = np.array([trajectoryBC[0][0],trajectoryBC[0][1],trajectoryBC[0][2],trajectoryBC[0][3],trajectoryBC[0][4],trajectoryBC[0][5]])
qfBC = np.array([trajectoryBC[-1][0],trajectoryBC[-1][1],trajectoryBC[-1][2],trajectoryBC[-1][3],trajectoryBC[-1][4],trajectoryBC[-1][5]])
q = q0BC

trajectoryCD_c = []
for i in range(len(trajectoryCD)):
    trajectoryCD_c.append(Scara_solveforward([math.degrees(trajectoryCD[i][0]),math.degrees(trajectoryCD[i][1]),trajectoryCD[i][2]]))

q0CD = np.array([trajectoryCD[0][0],trajectoryCD[0][1],trajectoryCD[0][2],trajectoryCD[0][3],trajectoryCD[0][4],trajectoryCD[0][5]])
qfCD = np.array([trajectoryCD[-1][0],trajectoryCD[-1][1],trajectoryCD[-1][2],trajectoryCD[-1][3],trajectoryCD[-1][4],trajectoryCD[-1][5]])
q = q0CD

trajectoryDA_c = []
for i in range(len(trajectoryDA)):
    trajectoryDA_c.append(Scara_solveforward([math.degrees(trajectoryDA[i][0]),math.degrees(trajectoryDA[i][1]),trajectoryDA[i][2]]))

q0DA = np.array([trajectoryDA[0][0],trajectoryDA[0][1],trajectoryDA[0][2],trajectoryDA[0][3],trajectoryDA[0][4],trajectoryDA[0][5]])
qfDA = np.array([trajectoryDA[-1][0],trajectoryDA[-1][1],trajectoryDA[-1][2],trajectoryDA[-1][3],trajectoryDA[-1][4],trajectoryDA[-1][5]])
q = q0DA

q0AB__ = double_derivate_trajAB[0]
q0BC__ = double_derivate_trajBC[0]
q0CD__ = double_derivate_trajCD[0]
q0DA__ = double_derivate_trajDA[0]


KAB0 = 0.01
KBC0 = 0.01
KCD0 = 0.01
KDA0 = 0.01

p_actual_trajAB = [Scara_solveforward([math.degrees(q0AB[0]),math.degrees(q0AB[1]),q0AB[2]])]
p_actual_trajBC = []
p_actual_trajCD = []
p_actual_trajDA = []

print(p_actual_trajAB[0])

for i in range(len(trajectoryAB)):
    qd = trajectoryAB[i]
    tau_c = FeedForwardcontroller(double_derivate_trajAB[i],qd,q,dt,KAB0)
    q_actual_dot = Scara_dynamics_model(q,tau_c)
    q_actual = q + np.array([q_actual_dot[0][0]*dt,q_actual_dot[1][0]*dt,q_actual_dot[2][0]*dt,q_actual_dot[3][0]*dt,q_actual_dot[4][0]*dt,q_actual_dot[5][0]*dt])
    q = q_actual
    p_actual = Scara_solveforward([math.degrees(q_actual[0]),math.degrees(q_actual[1]),q_actual[2]])
    p_actual_trajAB.append(p_actual)
    trajAB = p_actual_trajAB
p_actual_trajBC.append(trajAB[-1])
for i in range(len(trajectoryBC)):
    qd = trajectoryBC[i]
    tau_c = FeedForwardcontroller(double_derivate_trajBC[i],qd,q,dt,KBC0)
    q_actual_dot = Scara_dynamics_model(q,tau_c)
    q_actual = q + np.array([q_actual_dot[0][0]*dt,q_actual_dot[1][0]*dt,q_actual_dot[2][0]*dt,q_actual_dot[3][0]*dt,q_actual_dot[4][0]*dt,q_actual_dot[5][0]*dt])
    q = q_actual
    p_actual = Scara_solveforward([math.degrees(q_actual[0]),math.degrees(q_actual[1]),q_actual[2]])
    p_actual_trajBC.append(p_actual)
    trajBC = p_actual_trajBC
p_actual_trajCD.append(trajBC[-1])
for i in range(len(trajectoryCD)):
    qd = trajectoryCD[i]
    tau_c = FeedForwardcontroller(double_derivate_trajCD[i],qd,q,dt,KCD0)
    q_actual_dot = Scara_dynamics_model(q,tau_c)
    q_actual = q + np.array([q_actual_dot[0][0]*dt,q_actual_dot[1][0]*dt,q_actual_dot[2][0]*dt,q_actual_dot[3][0]*dt,q_actual_dot[4][0]*dt,q_actual_dot[5][0]*dt])
    q = q_actual
    p_actual = Scara_solveforward([math.degrees(q_actual[0]),math.degrees(q_actual[1]),q_actual[2]])
    p_actual_trajCD.append(p_actual)
    trajCD = p_actual_trajCD
p_actual_trajDA.append(trajCD[-1])
for i in range(len(trajectoryDA)):
    qd = trajectoryDA[i]
    tau_c = FeedForwardcontroller(double_derivate_trajDA[i],qd,q,dt,KDA0)
    q_actual_dot = Scara_dynamics_model(q,tau_c)
    q_actual = q + np.array([q_actual_dot[0][0]*dt,q_actual_dot[1][0]*dt,q_actual_dot[2][0]*dt,q_actual_dot[3][0]*dt,q_actual_dot[4][0]*dt,q_actual_dot[5][0]*dt])
    q = q_actual
    p_actual = Scara_solveforward([math.degrees(q_actual[0]),math.degrees(q_actual[1]),q_actual[2]])
    p_actual_trajDA.append(p_actual)
    trajDA = p_actual_trajDA

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True

def animate(num, data, line):
   line.set_alpha(0.7)
   line.set_data(data[0:2, :num])
   line.set_3d_properties(data[2, :num])
   return line

xAB_d = []
yAB_d = []
zAB_d = []
for i in trajectoryAB_c:
    xAB_d.append(i[0])
    yAB_d.append(i[1])
    zAB_d.append(i[2])

xBC_d = []
yBC_d = []
zBC_d = []
for i in trajectoryBC_c:
    xBC_d.append(i[0])
    yBC_d.append(i[1])
    zBC_d.append(i[2])

xCD_d = []
yCD_d = []
zCD_d = []
for i in trajectoryCD_c:
    xCD_d.append(i[0])
    yCD_d.append(i[1])
    zCD_d.append(i[2])

xDA_d = []
yDA_d = []
zDA_d = []
for i in trajectoryDA_c:
    xDA_d.append(i[0])
    yDA_d.append(i[1])
    zDA_d.append(i[2])

xAB_a = []
yAB_a = []
zAB_a = []
for j in trajAB:
    xAB_a.append(j[0])
    yAB_a.append(j[1])
    zAB_a.append(j[2])

xBC_a = []
yBC_a = []
zBC_a = []
for j in trajBC:
    xBC_a.append(j[0])
    yBC_a.append(j[1])
    zBC_a.append(j[2])

xCD_a = []
yCD_a = []
zCD_a = []
for j in trajCD:
    xCD_a.append(j[0])
    yCD_a.append(j[1])
    zCD_a.append(j[2])

xDA_a = []
yDA_a = []
zDA_a = []
for j in trajDA:
    xDA_a.append(j[0])
    yDA_a.append(j[1])
    zDA_a.append(j[2])
x_a = xAB_a + xBC_a + xCD_a + xDA_a
y_a = yAB_a + yBC_a + yCD_a + yDA_a
z_a = zAB_a + zBC_a + zCD_a + zDA_a
data = np.array([x_a,y_a,z_a])

N = len(4*trajAB)
fig = plt.figure()
ax = Axes3D(fig, auto_add_to_figure = False)
fig.add_axes(ax)

line, = plt.plot(data[0], data[1], data[2], lw=4, c='red')

ax.plot3D(xAB_d, yAB_d, zAB_d, 'green')
ax.plot3D(xBC_d, yBC_d, zBC_d, 'green')
ax.plot3D(xCD_d, yCD_d, zCD_d, 'green')
ax.plot3D(xDA_d, yDA_d, zDA_d, 'green')

line_ani = animation.FuncAnimation(fig, animate, frames=N, fargs=(data, line), interval=25, blit=False)

plt.show()